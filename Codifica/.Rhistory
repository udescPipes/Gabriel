load(".RData")
View(dadosTXT)
View(dados)
#Ao selecionar a coluna generos, a função unnest_tokeens fará a quebra de cada palavra da coluna genero e adicionará em uma nova linha
tb_filme_genero <- dados %>%
select(id_filme, titulo, generos) %>%
unnest_tokens(genero, generos) #Biblioteca tiedytext -
library(tidytext)
library(dplyr)
#Ao selecionar a coluna generos, a função unnest_tokeens fará a quebra de cada palavra da coluna genero e adicionará em uma nova linha
tb_filme_genero <- dados %>%
select(id_filme, titulo, generos) %>%
unnest_tokens(genero, generos) #Biblioteca tiedytext -
View(tb_filme_genero)
View(tb_lucro_diretor)
#Gráfico quantidade de filmes por ano - GGPLOT
ggplot(data = tb_filmes_ano) + #Informar a base de dados a ser utilizada (data)
geom_col(aes(x = ano, y = qtd_filmes, color = ano)) +
labs(title = "Filmes produzidos por ano")
tb_filmes_ano
teste <- tb_filmes_ano$ano
teste <-  unique(tb_filmes_ano$ano)
View(teste)
teste <-  unique(tb_filmes_ano$ano) %>% arrange(-ano)
teste <-  unique(tb_filmes_ano$ano) %>% arrange(desc(ano))
teste <-  tb_filmes_ano %>% arrange(desc(ano)) %>% unique(ano)
teste <-  tb_filmes_ano %>% arrange(desc(ano))
View(teste)
library(shiny)
library(flexdashboard)
library(shiny)
library(dplyr)
library(DT)
library(ggplot2)
library(plotly)
library(shiny)
library(dplyr)
library(DT)
library(ggplot2)
library(plotly)
dados <- read.delim(imdb.txt)
setwd("D:/Gabriel/Meus_Projetos/GitHub/Gabriel/Codifica")
dados <- read.delim("imdb.txt")
tb_filmes_ano
tb_filmes_ano$ano
tb_diretor_produtora
View(dados)
dados %>%
filter(ano = 2012)
dados %>%
filter(ano == 2012)
t <- dados %>%
filter(ano == 2012)
View(t)
ggplot(data = t) +
geom_line(aes(x = orcamento, y = receita))
ggplot(data = t) +
geom_line(aes(x = orcamento, y = receita, color = producao))
ggplot(data = t) +
geom_bar(aes(x = orcamento, y = receita, color = producao))
t <- dados %>%
group_by(producao) %>%
filter(ano == 2012)
t <- dados %>%
group_by(producao) %>%
filter(ano == 2012)
ggplot(data = t) +
geom_bar(aes(x = orcamento, y = receita, color = producao))
ggplot(data = t) +
geom_column(aes(x = orcamento, y = receita, color = producao))
#Gráfico quantidade de filmes por ator - Plotly
plot_ly(data = aux2) %>% #Informar a base de dados a ser utilizada (data)
add_bars(x = ~ano, y = ~receita, text = ~titulo) #Criar gráfico de barra, informando os valor da coordenada X e Y, text = valor apresentado na visualização
library(plotly)
aux2 <- dados %>%
filter(titulo %in% aux$titulo)
#Gráfico quantidade de filmes por ator - Plotly
plot_ly(data = aux2) %>% #Informar a base de dados a ser utilizada (data)
add_bars(x = ~ano, y = ~receita, text = ~titulo) #Criar gráfico de barra, informando os valor da coordenada X e Y, text = valor apresentado na visualização
tb_produtora <- dados %>%
group_by(producao) %>%
summarise(
qtd_filmes = n()
) %>%
arrange(desc(qtd_filmes))
tb_produtora <- dados %>%
filter(producao != "NA")
tb_produtora
View(tb_produtora)
min(tb_produtora$ano)
tb_produtora$ano
min(tb_produtora$ano)
max(tb_produtora$ano)
ano <- tb_produtora$ano
max(ano)
min(ano, na.rm = T)
ggplot(data = filmes_produtora) +
geom_col(x = ano, y = qtd_filmes)
filmes_produtora <- dados %>%
filter(producao == input$producao)
ggplot(data = filmes_produtora) +
geom_col(x = ano, y = qtd_filmes)
filmes_produtora <- dados %>%
filter(producao == "Twentieth Century Fox") %>%
group_by(ano) %>%
mutate(
qtd_filmes = n()
)
View(filmes_produtora)
filmes_produtora <- dados %>%
filter(producao == "Twentieth Century Fox") %>%
group_by(ano) %>%
summarise(
qtd_filmes = n()
)
max(tb_produtora$ano, na.rm = T)
# ---------------------------->> Mutate - alterar ou adicionar nova coluna
dados <- dados %>% mutate(
lucro = receita - orcamento
)
dados %>%
filter(producao == input$produtora, ano == input$ano) %>%
select(titulo, direcao, nota_imdb, lucro)
filmes_produtora <- dados %>%
filter(producao == "Twentieth Century Fox") %>%
summarise(
qtd_filmes = n(),
media_lucro = mean(lucro),
media_orcamento = mean(orcamento)
)
View(filmes_produtora)
filmes_produtora <- dados %>%
filter(producao == "Twentieth Century Fox") %>%
summarise(
qtd_filmes = n(),
media_lucro = mean(lucro, na.rm = T),
media_orcamento = mean(orcamento)
)
filmes_produtora
filmes_produtora <- dados %>%
filter(producao == "Twentieth Century Fox") %>%
summarise(
qtd_filmes = n(),
media_lucro = mean(lucro, na.rm = T),
media_orcamento = mean(orcamento, na.rm = T)
)
filmes_produtora
filmes_produtora <- dados %>%
filter(producao == "Twentieth Century Fox") %>%
max(filmes_produtora$)
filmes_produtora <- dados %>%
filter(producao == "Twentieth Century Fox")
max(filmes_produtora$lucro)
max(filmes_produtora$lucro, na.rm = T)
filter(filmes_produtora, lucro == max(filmes_produtora$lucro, na.rm = T))
teste <-filmes_produtora %>%
summarise(
qtd_filmes = n(),
media_lucro = mean(lucro, na.rm = T),
media_orcamento = mean(orcamento, na.rm = T)
filme_lucrativo = filter(filmes_produtora, lucro == max(filmes_produtora$lucro, na.rm = T))
teste <-filmes_produtora %>%
summarise(
qtd_filmes = n(),
media_lucro = mean(lucro, na.rm = T),
media_orcamento = mean(orcamento, na.rm = T),
filme_lucrativo = filter(filmes_produtora, lucro == max(filmes_produtora$lucro, na.rm = T))
)
View(teste)
teste <-filmes_produtora %>%
summarise(
qtd_filmes = n(),
media_lucro = mean(lucro, na.rm = T),
media_orcamento = mean(orcamento, na.rm = T),
filme_lucrativo = filter(filmes_produtora, lucro == max(filmes_produtora$lucro, na.rm = T)) %>% select(titulo)
)
teste
teste <-filmes_produtora %>%
summarise(
qtd_filmes = n(),
media_lucro = mean(lucro, na.rm = T),
media_orcamento = mean(orcamento, na.rm = T),
filme_lucrativo = filter(filmes_produtora, lucro == max(filmes_produtora$lucro, na.rm = T)) %>% select(titulo)
filme_prejuizo = filter(filmes_produtora, lucro == min(filmes_produtora$lucro, na.rm = T)) %>% select(titulo)
teste <-filmes_produtora %>%
summarise(
qtd_filmes = n(),
media_lucro = mean(lucro, na.rm = T),
media_orcamento = mean(orcamento, na.rm = T),
filme_lucrativo = filter(filmes_produtora, lucro == max(filmes_produtora$lucro, na.rm = T)) %>% select(titulo),
filme_prejuizo = filter(filmes_produtora, lucro == min(filmes_produtora$lucro, na.rm = T)) %>% select(titulo)
)
teste
teste <-filmes_produtora %>%
summarise(
qtd_filmes = n(),
media_lucro = mean(lucro, na.rm = T),
media_orcamento = mean(orcamento, na.rm = T),
media_imdb = mean(nota_imdb, na.rm = T)
filme_lucrativo = filter(filmes_produtora, lucro == max(filmes_produtora$lucro, na.rm = T)) %>% select(titulo),
teste <-filmes_produtora %>%
summarise(
qtd_filmes = n(),
media_lucro = mean(lucro, na.rm = T),
media_orcamento = mean(orcamento, na.rm = T),
media_imdb = mean(nota_imdb, na.rm = T),
filme_lucrativo = filter(filmes_produtora, lucro == max(filmes_produtora$lucro, na.rm = T)) %>% select(titulo),
filme_prejuizo = filter(filmes_produtora, lucro == min(filmes_produtora$lucro, na.rm = T)) %>% select(titulo) %>% mutate(filme_prejuizo = titulo)
)
teste
teste <-filmes_produtora %>%
summarise(
qtd_filmes = n(),
media_lucro = mean(lucro, na.rm = T),
media_orcamento = mean(orcamento, na.rm = T),
media_imdb = mean(nota_imdb, na.rm = T),
) %>%
mutate(
filme_lucrativo = filme_primeiro_lugar,
filme_prejuizo = filter(filmes_produtora, lucro == min(filmes_produtora$lucro, na.rm = T)) %>% select(titulo)
)
filme_primeiro_lugar =  filter(filmes_produtora, lucro == max(filmes_produtora$lucro, na.rm = T)) %>% select(titulo)
filme_ultimo_lugar = filter(filmes_produtora, lucro == min(filmes_produtora$lucro, na.rm = T)) %>% select(titulo)
teste <-filmes_produtora %>%
summarise(
qtd_filmes = n(),
media_lucro = mean(lucro, na.rm = T),
media_orcamento = mean(orcamento, na.rm = T),
media_imdb = mean(nota_imdb, na.rm = T),
) %>%
mutate(
filme_lucrativo = filme_primeiro_lugar,
filme_prejuizo = filter(filmes_produtora, lucro == min(filmes_produtora$lucro, na.rm = T)) %>% select(titulo)
)
teste
teste <-filmes_produtora %>%
summarise(
qtd_filmes = n(),
media_lucro = mean(lucro, na.rm = T),
media_orcamento = mean(orcamento, na.rm = T),
media_imdb = mean(nota_imdb, na.rm = T),
) %>%
mutate(
filme_lucrativo = filme_primeiro_lugar,
filme_prejuizo = filter(filmes_produtora, lucro == min(filmes_produtora$lucro, na.rm = T)) %>% select(titulo)
)
teste
teste <-filmes_produtora %>%
summarise(
qtd_filmes = n(),
media_lucro = mean(lucro, na.rm = T),
media_orcamento = mean(orcamento, na.rm = T),
media_imdb = mean(nota_imdb, na.rm = T),
) %>%
mutate(
filme_lucrativo = filme_primeiro_lugar,
filme_prejuizo = filme_ultimo_lugar
)
teste <- teste %>%
mutate(
filme_lucrativo = filme_primeiro_lugar,
filme_prejuizo = filme_ultimo_lugar
)
teste
teste <-filmes_produtora %>%
summarise(
qtd_filmes = n(),
media_lucro = mean(lucro, na.rm = T),
media_orcamento = mean(orcamento, na.rm = T),
media_imdb = mean(nota_imdb, na.rm = T),
)
teste <- teste %>%
mutate(
filme_lucrativo = filme_primeiro_lugar,
filme_prejuizo = filme_ultimo_lugar
)
View(teste)
filme_primeiro_lugar
filme_primeiro_lugar =  filter(filmes_produtora, lucro == max(filmes_produtora$lucro, na.rm = T))
filme_primeiro_lugar
filme_ultimo_lugar = filter(filmes_produtora, lucro == min(filmes_produtora$lucro, na.rm = T))
teste <- teste %>%
mutate(
filme_lucrativo = filme_primeiro_lugar$titulo,
maior_lucro  = filme_primeiro_lugar$lucro,
filme_prejuizo = filme_ultimo_lugar$titulo,
maior_prejuizo = filme_ultimo_lugar$lucro
)
View(teste)
teste <-filmes_produtora %>%
summarise(
qtd_filmes = n(),
media_lucro = round(mean(lucro, na.rm = T), digits = 2),
media_orcamento = round(mean(orcamento, na.rm = T), digits = 2),
media_imdb = round(mean(nota_imdb, na.rm = T), digits = 2)
)
teste <- teste %>%
mutate(
filme_lucrativo = filme_primeiro_lugar$titulo,
maior_lucro  = round(filme_primeiro_lugar$lucro, digits = 2),
filme_prejuizo = filme_ultimo_lugar$titulo,
maior_prejuizo = round(filme_ultimo_lugar$lucro, digits = 2)
)
teste
filmes_produtora <- dados %>%
filter(producao == "Twentieth Century Fox")
filme_primeiro_lugar =  filter(filmes_produtora, lucro == max(filmes_produtora$lucro, na.rm = T))
filme_ultimo_lugar = filter(filmes_produtora, lucro == min(filmes_produtora$lucro, na.rm = T))
teste <-filmes_produtora %>%
summarise(
qtd_filmes = n(),
media_lucro = round(mean(lucro, na.rm = T), digits = 2),
media_orcamento = round(mean(orcamento, na.rm = T), digits = 2),
media_imdb = round(mean(nota_imdb, na.rm = T), digits = 2)
)
teste <- teste %>%
mutate(
filme_lucrativo = filme_primeiro_lugar$titulo,
maior_lucro  = round(filme_primeiro_lugar$lucro, digits = 2),
filme_prejuizo = filme_ultimo_lugar$titulo,
maior_prejuizo = round(filme_ultimo_lugar$lucro, digits = 2)
)
teste
filmes_produtora <- dados %>%
filter(producao == "Twentieth Century Fox") %>%
group_by(lucro)
filmes_produtora
filmes_produtora <- dados %>%
filter(producao == "Twentieth Century Fox") %>%
group_by(ano) %>%
summarise(
lucro_anual = sum(lucro)
)
filmes_produtora
filmes_produtora <- dados %>%
filter(producao == "Twentieth Century Fox") %>%
group_by(ano) %>%
summarise(
lucro_anual = sum(lucro, na.rm = T)
)
filmes_produtora
View(filmes_produtora)
ggplot(data = filmes_produtora) +
geom_line(aes(x = ano, y = lucro_anual))
dados %>%
group_by(ano) %>%
filter(producao == input$produtora)
plotly(filmes_produtora, type = "scatter", mode = "lines") %>%
add_trace(x = ~ano, y = ~receita_anual)
library(tidyquant)
plotly(filmes_produtora, type = "scatter", mode = "lines") %>%
add_trace(x = ~ano, y = ~receita_anual)
plotly(data = filmes_produtora) %>%
add_trace(x = ~ano, y = ~receita_anual)
filmes_produtora <- dados %>%
filter(producao == "Twentieth Century Fox") %>%
group_by(ano) %>%
summarise(
lucro_anual = sum(lucro, na.rm = T)
)
library(tidyquant)
plotly(data = filmes_produtora) %>%
add_trace(x = ~ano, y = ~receita_anual)
plotly(filmes_produtora) %>%
add_trace(x = ~ano, y = ~receita_anual)
plotly(data = dados) %>%
add_trace(x = ~ano, y = ~receita)
plotly(dados) %>%
add_trace(x = ~ano, y = ~receita)
library(plotly)
plotly(dados) %>%
add_trace(x = ~ano, y = ~receita)
#Gráfico quantidade de filmes por ator - Plotly
plot_ly(data = aux2) %>% #Informar a base de dados a ser utilizada (data)
add_bars(x = ~ano, y = ~receita, text = ~titulo) #Criar gráfico de barra, informando os valor da coordenada X e Y, text = valor apresentado na visualização
plotly(dados, type = 'scatter', mode = 'lines') %>%
add_trace(x = ~ano, y = ~receita)
stock <- data.frame(GOOG$GOOG.Adjusted)
plotly(dados) %>%
add_trace(x = ~ano, y = ~receita)
x <- plotly(dados) %>%
add_trace(x = ~ano, y = ~receita) %>%
View(dados)
library(ggplot2)
library(dplyr)
library(viridis)
library(geobr)
library(sf)
library(maptools)
library(leaflet)
theme_set(theme_bw())
library(leaflet)
library(maptools)
library(leaflet)
install.packages("leaflet")
theme_set(theme_bw())
library(ggplot2)
library(dplyr)
library(viridis)
library(geobr)
library(sf)
library(geobr)
library(viridis)
library(dplyr)
library(maptools)
library(leaflet)
theme_set(theme_bw())
mapa <- read_state(showProgress = FALSE)
View(mapa)
?read_state
ggplot(mapa)+
geom_sf()
# dados de saneamento por estado (%) - associando com o código de cada estado
acesso_san <- data.frame(code_state = c(12, 27, 16, 13, 29, 23, 53, 32, 52, 21, 51, 50, 31, 15,
25, 41, 26, 22, 33, 24, 43, 11, 14, 42, 35, 28, 17),
com_rede = c(0.273, 0.412, 0.313, 0.177, 0.513, 0.696, 1.000, 0.974, 0.280, 0.065,
0.191, 0.449, 0.916, 0.063, 0.731, 0.421, 0.881, 0.045, 0.924, 0.353,
0.405, 0.096, 0.400, 0.352, 0.998, 0.347, 0.129))
View(acesso_san)
mapa %>%
left_join(acesso_san, by = "code_state") %>%
mutate(com_rede = 100*com_rede) %>%
ggplot(aes(fill = com_rede), color = "black") +
geom_sf() +
scale_fill_viridis(name = "Municípios com rede de esgoto (%)", direction = -1)
# com outra simbologia
coord_pontos <- mapa %>%
left_join(acesso_san, by = "code_state") %>%
mutate(com_rede = 100*com_rede) %>%
st_centroid()
# com outra simbologia
coord_pontos <- mapa %>%
left_join(acesso_san, by = "code_state") %>%
mutate(com_rede = 100*com_rede) %>%
st_centroid()
ggplot(mapa)+
geom_sf() +
geom_sf(data = coord_pontos, aes(size = com_rede), col = "blue", alpha = .65,
show.legend = "point") +
scale_size_continuous(name = "Municípios com rede de esgoto (%)")
ggplot(mapa)+
geom_sf() +
geom_sf(data = coord_pontos, aes(size = com_rede), col = "red", alpha = .65,
show.legend = "point") +
scale_size_continuous(name = "Municípios com rede de esgoto (%)")
# com Leaflet - mapa interativo
data.frame(st_coordinates(coord_pontos),
com_rede = coord_pontos$com_rede,
UF = coord_pontos$name_state) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(~ X, ~ Y,
label = ~ as.character(paste0(UF, ": ", com_rede, "%")),
labelOptions = labelOptions(textsize = "13px"),
radius = ~ com_rede/10,
fillOpacity = 0.5)
# calculando distância entre as estações de metrô
coordinates(estacoes) <- c('long', 'lat')
# marcando estações de metrô em SP com alfinetes (pelas coordenadas geográficas)
estacoes <- data.frame(estacao = c("Saúde", "Santa Cruz", "Paraíso"),
lat = c(-23.6185, -23.5989, -23.5765),
long = c(-46.6393, -46.6366, -46.6408))
View(estacoes)
leaflet(estacoes) %>%
addTiles() %>%
addMarkers(~long, ~lat, label = ~as.character(estacao))
# mapa alunos ceplan (semelhante ao feito em python)
alunos_ceplan <- data.frame(nome = c("aluno1","aluno2","aluno3","aluno4","aluno5","aluno6","aluno7","aluno8","aluno9","aluno10"),
lat = c(-26.280539, -26.224203, -26.245394, -26.20754, -26.23814, -26.254396, -26.213621, -26.249794, -26.231268, -26.233757),
long = c(-49.3984731, -49.4007692, -49.3543792, -49.3619098, -49.3653331, -49.3734998, -49.4154827, -49.3816555, -49.4201423, -49.3594545))
leaflet(alunos_ceplan) %>%
addTiles() %>%
addMarkers(~long, ~lat, label = ~as.character(nome))
# dados de saneamento por estado (%) - associando com o código de cada estado
acesso_san <- data.frame(code_state = c(12, 27, 16, 13, 29, 23, 53, 32, 52, 21, 51, 50, 31, 15,
25, 41, 26, 22, 33, 24, 43, 11, 14, 42, 35, 28, 17),
com_rede = c(0.273, 0.412, 0.313, 0.177, 0.513, 0.696, 1.000, 0.974, 0.280, 0.065,
0.191, 0.449, 0.916, 0.063, 0.731, 0.421, 0.881, 0.045, 0.924, 0.353,
0.405, 0.096, 0.400, 0.352, 0.998, 0.347, 0.129))
mapa %>%
left_join(acesso_san, by = "code_state") %>%
mutate(com_rede = 100*com_rede) %>%
ggplot(aes(fill = com_rede), color = "black") +
geom_sf() +
scale_fill_viridis(name = "Municípios com rede de esgoto (%)", direction = -1)
# com Leaflet - mapa interativo
data.frame(st_coordinates(coord_pontos),
com_rede = coord_pontos$com_rede,
UF = coord_pontos$name_state) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(~ X, ~ Y,
label = ~ as.character(paste0(UF, ": ", com_rede, "%")),
labelOptions = labelOptions(textsize = "13px"),
radius = ~ com_rede/10,
fillOpacity = 0.5)
?leaflet
library(ggmap)
install.packages("ggmap")
install.packages("mapview")
library(mapview)
addr <- data.frame(Address = c("4000 mayflower Hill, Waterville, Maine",
"2 Andrews Rd, Lewiston, ME 04240",
"255 Maine St, Brunswick, ME 04011",
"90 Quaker Hill Rd, Unity, ME 04988",
"105 Eden St, Bar Harbor, ME 04609"),
College = c("Colby", "Bates", "Bowdoin", "Unity", "CoA"),
stringsAsFactors = FALSE)
View(addr)
addr.geo <- mutate_geocode(addr, location = Address, output = "latlona")
library(ggmap)
addr.geo <- mutate_geocode(addr, location = Address, output = "latlona")
