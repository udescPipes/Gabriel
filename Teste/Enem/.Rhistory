print("Hello World");
int x = 10;
int x;
x = 10
print(x**2)
x = 20 * x
end()
x = 10;
int x = 10;
if(x == 10){
print("Hello World");
}
if(x != 10){
print("Hello World");
}
print("Ola Mundo")
print("Ola Mundo");
x = integer(1);
if(x != 10){
print("Hello World");
}
if(x != 10){
print("Hello World");
}else if(x == 1){
print("Ola Mundo");
}else{
print("Tchau")
}
if(x != 10){
print("Hello World");
}else if(x == 10){
print("Ola Mundo");
}else{
print("Tchau")
}
if(x >= 10){
print("Hello World");
}else if(x == 10){
print("Ola Mundo");
}else{
print("Tchau")
}
print("Ola")
while TRUE{
print("Ola")
while (x != 1){
print("Ola")
}
for(i = 0; i < 10; i++){
print(nome, "\n")
for (nome in nomes) {
print(nome, "\n")
}
print(nome)
for (nome in nomes) {
print(nome)
}
for (nomes in nome) {
print(nome)
}
library(Rcmdr)
library(ISwR)
View(juul2)
plot.new();
a <- 9
class(a)
a <- as.integer(a)
valores <- c(9, 8, 7, 6, 10, 22, 15)
crescente <- sort(valores, decreasing = FALSE) #Ordena valores em ordem crescente
decrescente <- sort(valores, decreasing = TRUE) # Ordena valores em ordem decrescente
min(valores) #Mostrar o menor valor do vetor
sum(valores) #Somatório dos valores
# Funções:
valores <- c(9, 8, 7, 6, 10)
prod(valores) #Produto dos valores
# Funções:
valores <- c(9, 8, 7, 6, 10, 6)
unique(valores)
unique(valores) #Valores distintos do vetor (sem repetição)
View(juul2)
#__> Criar Vetor, função C
vetorNumerico <- c(1:9) # os ':' retorna a sequencia dos números do intervalo
vetorCaractere <- c("Gabriel", "Spok", "Steve", "Kirk")
vetorLogico <- c(TRUE, TRUE, FALSE, TRUE)
print(vetorNumerico[1])
print(vetorNumerico[1:4]) #Acessar os valores da posiçãoInicial : posicaoF|inal
print(vetorNumerico[-3]) #Índice negativo representa que o valor em determinada posição não será apresentado
print(vetorNumerico[c(-3, -8)])
print(vetorNumerico[c(-3, -8)]) #Não mostrar o valor em mais de uma posição
#Pode se utilizar também operadores lógicos para mostrar determinado índice
vetorNumerico[vetorNumerico > 3]
vetorNumerico <- c(1:90) # os ':' retorna a sequencia dos números do intervalo
vetorNumerico[vetorNumerico < 18 && vetorNumerico > 60]
vetorNumerico[vetorNumerico < 18 | vetorNumerico > 60]
numerosPares <- seq(0, 100, 2)
numerosPares
numerosImpares <- seq(99, 1, -2) #Valores em ordem decresente
numerosImpares
# ------------------------------------------------------------------>> <<------------------------------------------------
# Função rep() - gera uma repetição, no qual o primeiro argumento é o valor a ser repetido e o segundo a quantidade de vezes
rep(99, 7)
seq(99, 1, -2) #Valores em ordem decresente
rep(c(1, 2), 5) #Repetição de um vetor
rep(seq(9, -9, -2), 5)
rep(c(1, 2), c(5, 3)) #Representa a quantidade que cada índice do vetor inicial será repetido por cada indice do segundo
#Listas: corresponde a conjunto de elementos que não necessitam ser da mesma classe(tipo de Dado)
list <- list(1, "Gabriel", "Siqueira", "25/11/2003", "M", "SBS")
View(list)
list <- list(1, "Gabriel", "Siqueira", "25/11/2003", "M", "SBS", c(9, 8.5, 10))
View(list)
#Mostrar determinado elemento
list[[1]]
#Mostrar determinado elemento
list[[2]]
list[[7]][1]
list[c(1, 3)]
list[c(2, 3)]
list[[8]][[1]]
list[[8]][[1]]
list[[8]]
list <- list(1, "Gabriel", "Siqueira", "25/11/2003", "M", "SBS", c(9, 8.5, 10), list(1, "Teste"))
list[[8]][[1]]
list[[8]][[2]]
#Listas na qual cada elemento possui um nome
aluno <- list(nome = "Gabriel", sobrenome = "Siqueira", dataNasc = "25/11/2003", sexo = "M", notas = c(9, 8.5, 10))
View(aluno)
aluno['nome']
names(aluno)
# ------------------------------------------------------------------>> <<------------------------------------------------
# Fatores: correspondem a variáveis categoricas, Na prática, se numa estrutura tiver varios valores iguais (como sexo), e possível agrupar (M ou F) e mostrar a quantidade de vezes que esta valor aparece
niveis <- factor("Bom", "Bom", "Ruim", "Regular", "Péssimo")
# ------------------------------------------------------------------>> <<------------------------------------------------
# Fatores: correspondem a variáveis categoricas, Na prática, se numa estrutura tiver varios valores iguais (como sexo), e possível agrupar (M ou F) e mostrar a quantidade de vezes que esta valor aparece
niveis <- factor("Bom", "Bom", "Ruim", "Regular", "Péssimo")
# ------------------------------------------------------------------>> <<------------------------------------------------
# Fatores: correspondem a variáveis categoricas, Na prática, se numa estrutura tiver varios valores iguais (como sexo), e possível agrupar (M ou F) e mostrar a quantidade de vezes que esta valor aparece
niveis <- factor(c("Bom", "Bom", "Ruim", "Regular", "Péssimo"))
niveis
View(niveis)
summary(niveis)
levels(niveis)
levels(niveis) <- niveis
levels(niveis) <- niveis
niveis
dor <- factor(c("Ruim", "Regular", "Bom"), levels = c("Bom", "Regular", "Ruim"))
# ------------------------------------------------------------------>> <<------------------------------------------------
#Coerção: ao criar um vetor de diversas classes, a linguagem R tenta uma maneira de transformar todos os objetos para a mesma classe.
exemploCoercao <- c(1, TRUE, 2, FALSE)
exemploCoercao
conve2
conve2 <- as.numeric(a)
conve2
a <- 1
conve3 <- as.logical(a)
conve3
conve4 <- as.integer(b) #Converter para integer
b <- 8.5
conve4 <- as.integer(b) #Converter para integer
install.packages("geobr")
summary(dadosAula2)
#Importação dos dados
setwd("D:/Gabriel/Meus_Projetos/GitHub/Gabriel/Curso_Estatistica_Com_R")
if(!require(dplyr)){
install.packages("dplyr")
}else{
library(dplyr)
}
# Importação da tabela
dadosAula2 <- read.csv("BD_Variaveis.csv", sep = ";", dec = ",")
summary(dadosAula2)
# Mostrar dados
glimpse(dadosAula2)
View(dadosAula2)
summary(dadosAula2)
#Mostrar coluna especifica, na qual satisfaz as condição
dadosAula2[dadosAula2$Genero == "M",c(1,3,5)]
#Ajuste de variáveis para ser do tipo categorico (factor) - labels - Criar um rótulo para identificar a variável - niveis
#Order: representa que existe ordem entre esta categorias, no levels se define a ordem - tipo de dador ordinal
dadosAula2$Genero <- factor(dadosAula2$Genero)
dadosAula2$Grau_de_Instruçao <- factor(dadosAula2$Grau_de_Instruçao,
labels = c("Fundamental", "Medio", "Superior"),
levels = 1:3,
order = T
)
#Codificação para dados ausentes
#Padrão, colocar nos dados adadosAulusentes os valores -999
dadosAula2[dadosAula2 == -999] <- NA
#Importação dos dados
setwd("D:/Gabriel/Meus_Projetos/GitHub/Gabriel/Curso_Estatistica_Com_R")
# Importação da tabela
dadosAula2 <- read.csv("BD_Variaveis.csv", sep = ";", dec = ",")
View(dadosAula2)
#Mostrar coluna especifica, na qual satisfaz as condição
dadosAula2[dadosAula2$Genero == "M",c(1,3,5)]
dadosAula2[dadosAula2$Idade > 20, c(1:5)]
dadosAula2[dadosAula2$Idade > 50, c(1:5)]
dadosAula2[dadosAula2$Idade > 35, c(1:5)]
setwd("D:\Gabriel\Meus_Projetos\GitHub\Gabriel\Curso_Estatistica_Com_R")
setwd("D:/Gabriel/Meus_Projetos/GitHub/Gabriel/Curso_Estatistica_Com_R")
dado <- read.csv("Amostra_Emigracao_42.csv", sep=";")
View(dado)
View(dado)
dados <- data.frame(
"42001014200101001001011851780047724820548149401003002119682010800099922227",
)
dados <- data.frame(
"42001014200101001001011851780047724820548149401003002119682010800099922227"
)
View(dados)
dado <- read.csv("Emigracao.csv", sep=";")
dado <- read.csv("Emigracao.csv", sep=";")
View(dado)
print(info)
for(info in dado){
print(info)
}
for(info in dado){
print(substr(info, 1:2))
}
for(info in dado){
print(substr(info, 1:2))
}
print(substr(info, c(1,2)))
substr(info, 1, 2)
dadoFormatado <- data.frame(
v0001 = ""
)
View(dadoFormatado)
for(info in dado){
dadoFormatado$v0001 = dsubstr(info, 1, 2)
}
for(info in dado){
dadoFormatado$v0001 = substr(info, 1, 2)
}
informacoes <- substr(info, 1, 2)
dadoFormatado <- data.frame(
v0001 = informacoes
)
View(dadoFormatado)
print(oi)
dividir <- function(){
print(oi)
}
View(dividir)
dividir()
dividir()
dividir <- function(){
print(oi)
}
dividir()
dividir <- function(){
print("oi")
}
dividir()
dividir <- function(dados, inicio, fim){
for(info in dado){
informacoes <-  substr(info, 1, 2)
}
return(informacoes)
}
dadoFormatado <- data.frame(
v0001 = dividir(dado,1,2)
)
View(dadoFormatado)
dividir <- function(dados, inicio, fim){
for(info in dado){
informacoes <-  substr(info, 1, 2)
}
return(informacoes)
}
dadoFormatado <- data.frame(
v0001 = dividir(dado,1,2)
)
View(dadoFormatado)
dadoFormatado <- data.frame(
v0001 = dividir(dado,1,2),
v0002 = dividir(dado,3,7),
v0011 = dividir(dado, 8,20),
v0300 = dividir(dado,21,28),
v0010 = dividir(dado,29,44),
v1001 = dividir(dado, 45,45),
v1002 = dividir(dado, 46,47),
v1003 = dividir(dado, 48,50),
v1004 = dividir(dado, 51,52),
v1006 = dividir(dado, 53,53),
v1303 = dividir(dado, 54,54),
v0304 = dividir(dado, 55, 58),
v0305 = dividir(dado, 59,62),
v3061 = dividir(dado,63,69),
m0303 = dividir(dado, 70,70),
m0304 = dividir(dado,71,71),
m0305 = dividir(dado, 72, 72),
m3061 = dividir(dado, 73,73),
v1005 = dividir(dado, 74,74)
)
View(dadoFormatado)
dividir <- function(dados, inicio, fim){
for(info in dado){
informacoes <-  substr(info, inicio, fim)
}
return(informacoes)
}
dadoFormatado <- data.frame(
v0001 = dividir(dado,1,2),
v0002 = dividir(dado,3,7),
v0011 = dividir(dado, 8,20),
v0300 = dividir(dado,21,28),
v0010 = dividir(dado,29,44),
v1001 = dividir(dado, 45,45),
v1002 = dividir(dado, 46,47),
v1003 = dividir(dado, 48,50),
v1004 = dividir(dado, 51,52),
v1006 = dividir(dado, 53,53),
v1303 = dividir(dado, 54,54),
v0304 = dividir(dado, 55, 58),
v0305 = dividir(dado, 59,62),
v3061 = dividir(dado,63,69),
m0303 = dividir(dado, 70,70),
m0304 = dividir(dado,71,71),
m0305 = dividir(dado, 72, 72),
m3061 = dividir(dado, 73,73),
v1005 = dividir(dado, 74,74)
)
View(dadoFormatado)
dadoFormatado$v0001
dadoFormatado$v0001 <- factor(
labels = c("SC")
)
dadoFormatado$v0001 <- factor(
labels = c("SC")
)
dadoFormatado$v0001 <- factor(dadoFormatado$v0001,
labels = "SC")
View(dadoFormatado)
summary(dadoFormatado)
dadoFormatado$v0001 <- factor(dadoFormatado$v0001)
View(dadoFormatado)
dadoFormatado$v0002 <- factor(dadoFormatado$v0002)
summary(dadoFormatado)
dado <- read.csv("Emigracao.csv", sep=";")
dadoFormatado <- data.frame(
v0001 = dividir(dado,1,2),
v0002 = dividir(dado,3,7),
v0011 = dividir(dado, 8,20),
v0300 = dividir(dado,21,28),
v0010 = dividir(dado,29,44),
v1001 = dividir(dado, 45,45),
v1002 = dividir(dado, 46,47),
v1003 = dividir(dado, 48,50),
v1004 = dividir(dado, 51,52),
v1006 = dividir(dado, 53,53),
v1303 = dividir(dado, 54,54),
v0304 = dividir(dado, 55, 58),
v0305 = dividir(dado, 59,62),
v3061 = dividir(dado,63,69),
m0303 = dividir(dado, 70,70),
m0304 = dividir(dado,71,71),
m0305 = dividir(dado, 72, 72),
m3061 = dividir(dado, 73,73),
v1005 = dividir(dado, 74,74)
)
View(dadoFormatado)
dadoFormatado <- data.frame(
v0001 = factor(dividir(dado,1,2)),
v0002 = dividir(dado,3,7),
v0011 = dividir(dado, 8,20),
v0300 = dividir(dado,21,28),
v0010 = dividir(dado,29,44),
v1001 = dividir(dado, 45,45),
v1002 = dividir(dado, 46,47),
v1003 = dividir(dado, 48,50),
v1004 = dividir(dado, 51,52),
v1006 = dividir(dado, 53,53),
v1303 = dividir(dado, 54,54),
v0304 = dividir(dado, 55, 58),
v0305 = dividir(dado, 59,62),
v3061 = dividir(dado,63,69),
m0303 = dividir(dado, 70,70),
m0304 = dividir(dado,71,71),
m0305 = dividir(dado, 72, 72),
m3061 = dividir(dado, 73,73),
v1005 = dividir(dado, 74,74)
)
View(dadoFormatado)
summary(dadoFormatado)
return(factor(informacoes)
}
return(informacoes)
#Separar as informações da primeira coluna
dividir <- function(dados, inicio, fim){
for(info in dado){
informacoes <-  substr(info, inicio, fim)
}
informacoes <- factor(informacoes)
return(informacoes)
}
dadoFormatado <- data.frame(
v0001 = dividir(dado,1,2),
v0002 = dividir(dado,3,7),
v0011 = dividir(dado, 8,20),
v0300 = dividir(dado,21,28),
v0010 = dividir(dado,29,44),
v1001 = dividir(dado, 45,45),
v1002 = dividir(dado, 46,47),
v1003 = dividir(dado, 48,50),
v1004 = dividir(dado, 51,52),
v1006 = dividir(dado, 53,53),
v1303 = dividir(dado, 54,54),
v0304 = dividir(dado, 55, 58),
v0305 = dividir(dado, 59,62),
v3061 = dividir(dado,63,69),
m0303 = dividir(dado, 70,70),
m0304 = dividir(dado,71,71),
m0305 = dividir(dado, 72, 72),
m3061 = dividir(dado, 73,73),
v1005 = dividir(dado, 74,74)
)
summary(dadoFormatado)
View(dadoFormatado)
#Separar as informações da primeira coluna
dividir <- function(dados, inicio, fim){
for(info in dado){
informacoes <-  substr(info, inicio, fim)
}
return(informacoes)
}
dadoFormatado <- data.frame(
v0001 = dividir(dado,1,2),
v0002 = dividir(dado,3,7),
v0011 = dividir(dado, 8,20),
v0300 = dividir(dado,21,28),
v0010 = dividir(dado,29,44),
v1001 = dividir(dado, 45,45),
v1002 = dividir(dado, 46,47),
v1003 = dividir(dado, 48,50),
v1004 = dividir(dado, 51,52),
v1006 = dividir(dado, 53,53),
v1303 = dividir(dado, 54,54),
v0304 = dividir(dado, 55, 58),
v0305 = dividir(dado, 59,62),
v3061 = dividir(dado,63,69),
m0303 = dividir(dado, 70,70),
m0304 = dividir(dado,71,71),
m0305 = dividir(dado, 72, 72),
m3061 = dividir(dado, 73,73),
v1005 = dividir(dado, 74,74)
)
dadoFormatado$v0001 <- factor(dadoFormatado$v0001)
dadoFormatado$v0002 <- factor(dadoFormatado$v0002)
summary(dadoFormatado)
length(dadoFormatado[dadoFormatado$v0002 == "19002", 2:3)
length(dadoFormatado[dadoFormatado$v0002 == "19002", 2:3])
dadoFormatado[dadoFormatado$v0002 == "19002", 2:3]
qtd <-dadoFormatado[dadoFormatado$v0002 == "19002", 2:3]
length(qtd)
setwd("D:/Gabriel/Meus_Projetos/GitHub/Gabriel/Teste/Enem")
enem <- read.csv("MICRODADOS_ENEM_2021.csv", sep=";", dec = ",")
View(enem)
#Definição das variáveis categoricas
enem$TP_FAIXA_ETARIA <- factor(enem$TP_FAIXA_ETARIA)
summary(enem)
summary(enem$TP_FAIXA_ETARIA)
enem <- read.csv("MICRODADOS_ENEM_2021.csv", sep=";", dec = ",")
#Definição das variáveis categoricas
enem$TP_FAIXA_ETARIA <- factor(enem$TP_FAIXA_ETARIA)
summary(enem$TP_FAIXA_ETARIA)
enem$TP_SEXO
enem$TP_SEXO <- factor(enem$TP_SEXO)
install.packages(dpl)
library(dpy)
glimpse(enem)
enem$TP_ESTADO_CIVIL <- factor(enem$TP_ESTADO_CIVIL)
enem$TP_NACIONALIDADE <- factor(enem$TP_NACIONALIDADE)
enem$TP_ST_CONCLUSAO <- factor(enem$TP_ST_CONCLUSAO)
enem$TP_ANO_CONCLUIU <- factor(enem$TP_ANO_CONCLUIU)
enem$TP_ESCOLA <- factor(enem$TP_ESCOLA)
enem$TP_ENSINO <- factor(enem$TP_ENSINO)
enem$IN_TREINEIRO <- factor(enem$IN_TREINEIRO)
summary(enem)
enem$TP_COR_RACA <- factor(enem$TP_COR_RACA)
enem$TP_FAIXA_ETARIA <- factor(enem$TP_FAIXA_ETARIA)
enem$TP_SEXO <- factor(enem$TP_SEXO)
enem$TP_ESTADO_CIVIL <- factor(enem$TP_ESTADO_CIVIL)
enem$TP_COR_RACA <- factor(enem$TP_COR_RACA)
enem$TP_NACIONALIDADE <- factor(enem$TP_NACIONALIDADE)
enem$TP_ST_CONCLUSAO <- factor(enem$TP_ST_CONCLUSAO)
enem$TP_ANO_CONCLUIU <- factor(enem$TP_ANO_CONCLUIU)
enem$TP_ESCOLA <- factor(enem$TP_ESCOLA)
enem$TP_ENSINO <- factor(enem$TP_ENSINO)
enem$IN_TREINEIRO <- factor(enem$IN_TREINEIRO)
summary(enem)
library(Rcmdr)
glimpse(enem)
enem[enem$CO_MUNICIPIO_ESC == 4215802, c(1,2)]
boxplot(enem$TP_FAIXA_ETARIA, ylab = "IDADE")
plot(enem$TP_FAIXA_ETARIA, ylab = "IDADE")
#Definição das variáveis categoricas
enem$TP_FAIXA_ETARIA <- factor(enem$TP_FAIXA_ETARIA
labels = C("Menor de 17 anos","17 anos","18 anos","19 anos","20 anos","21 anos","22 anos",
#Definição das variáveis categoricas
enem$TP_FAIXA_ETARIA <- factor(enem$TP_FAIXA_ETARIA,
labels = C("Menor de 17 anos","17 anos","18 anos","19 anos","20 anos","21 anos","22 anos",
"23 anos","24 anos","25 anos","Entre 26 e 30 anos","Entre 31 e 35 anos",
"Entre 36 e 40 anos","Entre 41 e 45 anos","Entre 46 e 50 anos","Entre 51 e 55 anos", "Entre 56 e 60 anos",
"Entre 61 e 65 anos", "Entre 66 e 70 anos", "Maior de 70 anos"),
levels = 0:20
)
plot(enem$TP_FAIXA_ETARIA, ylab = "IDADE")
View(enem)
alunosSBS <- enem[enem$CO_MUNICIPIO_ESC == 4215802, 1:76]
enem[enem$CO_MUNICIPIO_ESC == 4215802, 1:76]
