print("Hello World");
int x = 10;
int x;
x = 10
print(x**2)
x = 20 * x
end()
x = 10;
int x = 10;
if(x == 10){
print("Hello World");
}
if(x != 10){
print("Hello World");
}
print("Ola Mundo")
print("Ola Mundo");
x = integer(1);
if(x != 10){
print("Hello World");
}
if(x != 10){
print("Hello World");
}else if(x == 1){
print("Ola Mundo");
}else{
print("Tchau")
}
if(x != 10){
print("Hello World");
}else if(x == 10){
print("Ola Mundo");
}else{
print("Tchau")
}
if(x >= 10){
print("Hello World");
}else if(x == 10){
print("Ola Mundo");
}else{
print("Tchau")
}
print("Ola")
while TRUE{
print("Ola")
while (x != 1){
print("Ola")
}
for(i = 0; i < 10; i++){
print(nome, "\n")
for (nome in nomes) {
print(nome, "\n")
}
print(nome)
for (nome in nomes) {
print(nome)
}
for (nomes in nome) {
print(nome)
}
library(Rcmdr)
library(ISwR)
View(juul2)
plot.new();
a <- 9
class(a)
a <- as.integer(a)
valores <- c(9, 8, 7, 6, 10, 22, 15)
crescente <- sort(valores, decreasing = FALSE) #Ordena valores em ordem crescente
decrescente <- sort(valores, decreasing = TRUE) # Ordena valores em ordem decrescente
min(valores) #Mostrar o menor valor do vetor
sum(valores) #Somatório dos valores
# Funções:
valores <- c(9, 8, 7, 6, 10)
prod(valores) #Produto dos valores
# Funções:
valores <- c(9, 8, 7, 6, 10, 6)
unique(valores)
unique(valores) #Valores distintos do vetor (sem repetição)
View(juul2)
#__> Criar Vetor, função C
vetorNumerico <- c(1:9) # os ':' retorna a sequencia dos números do intervalo
vetorCaractere <- c("Gabriel", "Spok", "Steve", "Kirk")
vetorLogico <- c(TRUE, TRUE, FALSE, TRUE)
print(vetorNumerico[1])
print(vetorNumerico[1:4]) #Acessar os valores da posiçãoInicial : posicaoF|inal
print(vetorNumerico[-3]) #Índice negativo representa que o valor em determinada posição não será apresentado
print(vetorNumerico[c(-3, -8)])
print(vetorNumerico[c(-3, -8)]) #Não mostrar o valor em mais de uma posição
#Pode se utilizar também operadores lógicos para mostrar determinado índice
vetorNumerico[vetorNumerico > 3]
vetorNumerico <- c(1:90) # os ':' retorna a sequencia dos números do intervalo
vetorNumerico[vetorNumerico < 18 && vetorNumerico > 60]
vetorNumerico[vetorNumerico < 18 | vetorNumerico > 60]
numerosPares <- seq(0, 100, 2)
numerosPares
numerosImpares <- seq(99, 1, -2) #Valores em ordem decresente
numerosImpares
# ------------------------------------------------------------------>> <<------------------------------------------------
# Função rep() - gera uma repetição, no qual o primeiro argumento é o valor a ser repetido e o segundo a quantidade de vezes
rep(99, 7)
seq(99, 1, -2) #Valores em ordem decresente
rep(c(1, 2), 5) #Repetição de um vetor
rep(seq(9, -9, -2), 5)
rep(c(1, 2), c(5, 3)) #Representa a quantidade que cada índice do vetor inicial será repetido por cada indice do segundo
#Listas: corresponde a conjunto de elementos que não necessitam ser da mesma classe(tipo de Dado)
list <- list(1, "Gabriel", "Siqueira", "25/11/2003", "M", "SBS")
View(list)
list <- list(1, "Gabriel", "Siqueira", "25/11/2003", "M", "SBS", c(9, 8.5, 10))
View(list)
#Mostrar determinado elemento
list[[1]]
#Mostrar determinado elemento
list[[2]]
list[[7]][1]
list[c(1, 3)]
list[c(2, 3)]
list[[8]][[1]]
list[[8]][[1]]
list[[8]]
list <- list(1, "Gabriel", "Siqueira", "25/11/2003", "M", "SBS", c(9, 8.5, 10), list(1, "Teste"))
list[[8]][[1]]
list[[8]][[2]]
#Listas na qual cada elemento possui um nome
aluno <- list(nome = "Gabriel", sobrenome = "Siqueira", dataNasc = "25/11/2003", sexo = "M", notas = c(9, 8.5, 10))
View(aluno)
aluno['nome']
names(aluno)
# ------------------------------------------------------------------>> <<------------------------------------------------
# Fatores: correspondem a variáveis categoricas, Na prática, se numa estrutura tiver varios valores iguais (como sexo), e possível agrupar (M ou F) e mostrar a quantidade de vezes que esta valor aparece
niveis <- factor("Bom", "Bom", "Ruim", "Regular", "Péssimo")
# ------------------------------------------------------------------>> <<------------------------------------------------
# Fatores: correspondem a variáveis categoricas, Na prática, se numa estrutura tiver varios valores iguais (como sexo), e possível agrupar (M ou F) e mostrar a quantidade de vezes que esta valor aparece
niveis <- factor("Bom", "Bom", "Ruim", "Regular", "Péssimo")
# ------------------------------------------------------------------>> <<------------------------------------------------
# Fatores: correspondem a variáveis categoricas, Na prática, se numa estrutura tiver varios valores iguais (como sexo), e possível agrupar (M ou F) e mostrar a quantidade de vezes que esta valor aparece
niveis <- factor(c("Bom", "Bom", "Ruim", "Regular", "Péssimo"))
niveis
View(niveis)
summary(niveis)
levels(niveis)
levels(niveis) <- niveis
levels(niveis) <- niveis
niveis
dor <- factor(c("Ruim", "Regular", "Bom"), levels = c("Bom", "Regular", "Ruim"))
# ------------------------------------------------------------------>> <<------------------------------------------------
#Coerção: ao criar um vetor de diversas classes, a linguagem R tenta uma maneira de transformar todos os objetos para a mesma classe.
exemploCoercao <- c(1, TRUE, 2, FALSE)
exemploCoercao
conve2
conve2 <- as.numeric(a)
conve2
a <- 1
conve3 <- as.logical(a)
conve3
conve4 <- as.integer(b) #Converter para integer
b <- 8.5
conve4 <- as.integer(b) #Converter para integer
install.packages("geobr")
#Importação dos dados
setwd("D:/Gabriel/Meus_Projetos/GitHub/Gabriel/Curso_Estatistica_Com_R")
if(!require(dplyr)){
install.packages("dplyr")
}else{
library(dplyr)
}
dadosAula3 <- read.csv("BD_Variaveis.csv", sep = ";", dec = ",")
View(dadosAula3)
dadosAula4 <- read.csv2("BD_Variaveis.csv")
View(dadosAula4)
glimpse(dadosAula4)
#Frequência absolutas:
table(dadosAula4$Genero)
table(dadosAula4$Grau_de_Instruçao)
#Tabela cruzada de frequência absolutas
table(dadosAula4$Genero, dadosAula4$Grau_de_Instruçao)
#Tabela cruzada de frequência absolutas
table(dadosAula4$Genero, dadosAula4$Grau_de_Instruçao, dadosAula4$N_Filhos)
#Tabela cruzada de frequência absolutas
table(dadosAula4$Genero, dadosAula4$Grau_de_Instruçao)
dadosAula4$Grau_de_Instruçao <- factor(dadosAula3$Grau_de_Instruçao,
labels = c("Fundamental", "Medio", "Superior"),
levels = 1:3,
order = T
)
dadosAula4$Grau_de_Instruçao <- factor(dadosAula4$Grau_de_Instruçao,
labels = c("Fundamental", "Medio", "Superior"),
levels = 1:3,
order = T
)
#Tabela cruzada de frequência absolutas
table(dadosAula4$Genero, dadosAula4$Grau_de_Instruçao)
#Frequência relativa (porcentagem)
prop.table(table(dadosAula4$Genero))
prop.table(  table(dadosAula4$Genero, dadosAula4$Grau_de_Instruçao))
#Variaveis descritivas:
table(dadosAula4$N_Filhos)
prop.table(table(dadosAula4$N_Filhos))
#Passo 1: analisar a amplitude - maior e menor valor
range(dadosAula4$Salario)
#Passo 2 (opcional): avaliar a quantidade de categorias adequadas (método Sturges)
nclass.Sturges(dadosAula4$Salario)
#Passo 2 (opcional): avaliar a quantidade de categorias adequadas (método Sturges)
nclass.Sturges(dadosAula4$Salario)
#PAsso 3: criação de tabela com faixas de valores - cut - dividir a variavel em faixa de valores e seq(valorMin, valorMax, l = numero de faixas (1 a mais))
table(cut(dadosAula4$Salario), seq(0, 6, l = 7))
#PAsso 3: criação de tabela com faixas de valores - cut - dividir a variavel em faixa de valores e seq(valorMin, valorMax, l = numero de faixas (1 a mais))
table(cut(dadosAula4$Salario), seq(0, 6, l = 7))
#PAsso 3: criação de tabela com faixas de valores - cut - dividir a variavel em faixa de valores e seq(valorMin, valorMax, l = numero de faixas (1 a mais))
table(cut(dadosAula4$Salario), seq(0, 6, l = 7))
#PAsso 3: criação de tabela com faixas de valores - cut - dividir a variavel em faixa de valores e seq(valorMin, valorMax, l = numero de faixas (1 a mais))
table(cut(dadosAula4$Salario), seq(0, 6, l = 7))
#PAsso 3: criação de tabela com faixas de valores - cut - dividir a variavel em faixa de valores e seq(valorMin, valorMax, l = numero de faixas (1 a mais))
table(cut(dadosAula4$Salario), seq(0, 6, l = 7)))
#PAsso 3: criação de tabela com faixas de valores - cut - dividir a variavel em faixa de valores e seq(valorMin, valorMax, l = numero de faixas (1 a mais))
table(cut(dadosAula4$Salario, seq(0, 6, l = 7)))
summary(dadosAula4$Salario)
install.packages("psych")
describe(dadosAula4$Salario)
library(psych)
describe(dadosAula4$Salario)
describe(dadosAula4$Salario)
describeBy(dadosAula4$Salario, group = dadosAula4$Genero)
#Mesma função, ams para mais de uma variável
describeBy(dadosAula4$Salario, group = dadosAula4$Grau_de_Instruçao)
Genero
#Mesma função, ams para mais de uma variável
describeBy(dadosAula4$Salario, group = dadosAula4$Genero)
describeBy(dadosAula4$Salario, group = dadosAula4$Genero:dadosAula04$Grau_de_Instruçao )
describeBy(dadosAula4$Salario, group = dadosAula04$Genero:dadosAula04$Grau_de_Instruçao)
describeBy(dadosAula4$Salario, group = dadosAula04$Genero:dadosAula04$Grau_de_Instruçao)
describeBy(dadosAula4$Salario, group = dadosAula4$Genero:dadosAula4$Grau_de_Instruçao)
describeBy(dadosAula4$Salario, group = dadosAula4$Genero:dadosAula4$Grau_de_Instruçao)
# Group BY - %>% operador pipe
tabela <- dadosAula4 %>% group_by(Genero, Grau_de_Instruçao) %>%
summarise(
media = mean(Salario),
DP = sd(Salario) #Desvio padrão
mediana = median(Salario)
# Group BY - %>% operador pipe
tabela <- dadosAula4 %>% group_by(Genero, Grau_de_Instruçao) %>%
summarise(
media = mean(Salario),
DP = sd(Salario) #Desvio padrão,
mediana = median(Salario)
tabela
# Group BY - %>% operador pipe
tabela <- dadosAula4 %>% group_by(Genero, Grau_de_Instruçao) %>%
summarise(
media = mean(Salario),
DP = sd(Salario) #Desvio padrão,
mediana = median(Salario)
# Group BY - %>% operador pipe
tabela <- dadosAula4 %>% group_by(Genero, Grau_de_Instruçao) %>%
summarise(
media = mean(Salario),
DP = sd(Salario) #Desvio padrão,
mediana = median(Salario))
tabela
# Group BY - %>% operador pipe
tabela <- dadosAula4 %>% group_by(Genero, Grau_de_Instruçao) %>%
summarise(
media = mean(Salario),
DP = sd(Salario) #Desvio padrão,
mediana = median(Salario))
# Group BY - %>% operador pipe
tabela <- dadosAula4 %>% group_by(Genero, Grau_de_Instruçao) %>%
summarise(
media = mean(Salario),
DP = sd(Salario), #Desvio padrão,
mediana = median(Salario))
tabela
View(tabela)
dado <- read.csv("Emigracao.csv", sep=";")
setwd("D:/Gabriel/Meus_Projetos/GitHub/Gabriel/Teste/Enem")
enem <- read.csv("MICRODADOS_ENEM_2021.csv", sep=";", dec = ",")
View(enem)
table(enem$SG_UF_ESC, enem$TP_SEXO)
plot.table(table(enem$SG_UF_ESC, enem$TP_SEXO))
plop.table(table(enem$SG_UF_ESC, enem$TP_SEXO))
install.packages("psych")
library("psych")
plop.table(table(enem$SG_UF_ESC, enem$TP_SEXO))
prop.table(table(enem$SG_UF_ESC, enem$TP_SEXO))
table(enem$SG_UF_ESC, enem$TP_SEXO)
#Verificar intervalo de notas
range(enem$NU_NOTA_MT)
# PREENCHER VAriaveis padrao
enem[enem == ""] = NA
View(enem)
View(enem)
View(enem)
#Verificar intervalo de notas
range(enem$NU_NOTA_MT)
#Verificar intervalo de notas
range(enem$NU_NOTA_MT)
enem <- read.csv("MICRODADOS_ENEM_2021.csv", sep=";", dec = ",")
