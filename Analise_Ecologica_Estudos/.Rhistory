xaxis = list(title = '', barmode = 'group')
)
})
}
#Definir as propriedades da página
ui <- navbarPage("WebSerie Reclame Aqui",
tabPanel("Início", class = "text-center", imageOutput(outputId = "logo", height = "0px"),
h1("Episódio 03"),
wordcloud2Output(outputId = "wordcloud2")
),
tabPanel("Comparação Geral",
column(4,
selectInput(inputId = "comparacao_v1",
label = "Quais resultados você quer comparar",
choices = menu_comparacao,
width = "100%"),
selectInput(inputId = "comparacao_v2",
label = "Quais resultados você quer comparar",
choices =  menu_comparacao,
selected = menu_comparacao[2],
width = "100%")
),
column(8,
plotlyOutput(outputId = "comparacao_graf", width = "100%", )
)
),
tabPanel("Título Vs Solução",
column(4,
selectInput(inputId = "relacao_empresa",
label = "Qual empresa você deseja analisar",
choice = info_basicas$empresa,
width = "100%")
),
column(8,
plotlyOutput(outputId = "relacao_graf_maiores", width = "100%"),
plotlyOutput(outputId = "relacao_graf_menores", width = "100%")
)
)
)
obter_informacoes_orcamento(orcamento, 2019)
library(tidytext)
library(tidyverse)
setwd("D:/Gabriel/Meus_Projetos/GitHub/Projeto_Orcamento_Br")
# Exportação dos Dados
orcamento <- read.csv2("Orcamento_brasil_2014-2023.csv")
setwd("D:/Gabriel/Meus_Projetos/GitHub/Projeto_Orcamento_Br")
# Exportação dos Dados
orcamento <- read.csv2("Orcamento_brasil_2014-2023.csv")
# Exportação dos Dados
orcamento <- read.csv2("Orcamento_brasil_2014-2023.csv")
setwd("D:/Gabriel/Meus_Projetos/GitHub/Projeto_Orcamento_Br")
# Exportação dos Dados
orcamento <- read.csv2("Orcamento_brasil_2014-2023.csv")
setwd("D:\Gabriel\Meus_Projetos\Projetos_Futuros\Olimpiadas")
setwd("D:/Gabriel/Meus_Projetos/Projetos_Futuros/Olimpiadas")
library(highcharter)
library(tidyverse)
install.packages("dplyr")
library(dplyr)
library(shiny)
library(shiny)
olimpiadas <- read.csv("Athletes_summer_games.csv")
View(olimpiadas)
resumo_esporte <- olimpiadas %>%
group_by(Sport) %>%
summarise_(
qtd = n()
)
resumo_esporte <- olimpiadas %>%
group_by(Sport) %>%
summarise_(
qtd = n()
)
resumo_esporte <- olimpiadas %>%
group_by(Sport) %>%
summarise(
qtd = n()
)
View(resumo_esporte)
length(resumo_esporte)
row_number(resumo_esporte)
count(resumo_esporte)
resumo_esporte <- olimpiadas %>%
group_by(Sport) %>%
summarise(
qtd = count(resumo_esporte)
)
View(resumo_esporte)
View(resumo_esporte)
resumo_edicoes <- olimpiadas %>%
group_by(Year) %>%
summarise(
qtd = n()
)
View(resumo_edicoes)
resumo_medalhas <- olimpiadas %>%
group_by(Medal) %>%
summarise(
qtd = n()
)
View(resumo_medalhas)
resumo_medalhas <- olimpiadas %>%
group_by(Medal) %>%
summarise(
qtd = n()
) %>% filter(Medal != "")
View(resumo_medalhas)
resumo_evento <- olimpiadas %>%
group_by(Event) %>%
summarise(
qtd = n()
)
resumo_atletas <- olimpiadas %>%
summarise(
qtd = n(),
media_idade = median(Age)
)
View(resumo_atletas)
# Criar a estrutura do gráfico de linha
hchart(
resumo_edicao,
type = "line",
hcaes(x=Age, y=media_idade)
) %>%
hc_title(text = "Gráfico de Linha") %>% # Título
hc_subtitle(text = "Quantidade de atletas por edição das Olimpíadas 1896-2020") %>% #Subtitulo
hc_caption(text = "Dados considerando a quantidade total por edição") %>% # Legenda
hc_xAxis(title = list(text = "Edição")) %>% # Título eixo X
hc_yAxis(title = list(text="Quantidade de Atletas")) %>% # Título eixo Y
hc_tooltip(pointFormat = "<b>Quantidade de Atletas nesta edição </b> {point.y}<br>")  %>% # Texto ao selecionar o objeto
hc_add_theme(hc_theme_alone()) # Adicionar um tema ao gráfico
# Criar a estrutura do gráfico de linha
hchart(
resumo_edicao,
type = "line",
hcaes(x=Year, y=media_idade)
) %>%
hc_title(text = "Gráfico de Linha") %>% # Título
hc_subtitle(text = "Quantidade de atletas por edição das Olimpíadas 1896-2020") %>% #Subtitulo
hc_caption(text = "Dados considerando a quantidade total por edição") %>% # Legenda
hc_xAxis(title = list(text = "Edição")) %>% # Título eixo X
hc_yAxis(title = list(text="Quantidade de Atletas")) %>% # Título eixo Y
hc_tooltip(pointFormat = "<b>Quantidade de Atletas nesta edição </b> {point.y}<br>")  %>% # Texto ao selecionar o objeto
hc_add_theme(hc_theme_alone()) # Adicionar um tema ao gráfico
resumo_edicao <- olimpiadas %>%
group_by(Year) %>%
summarise(
freq = n(),
media_idade = mean(Age)
)
View(resumo_edicoes)
View(resumo_edicao)
View(resumo_edicao)
resumo_edicao <- olimpiadas %>%
group_by(Year) %>%
summarise(
freq = n(),
media_idade = median(Age)
)
View(resumo_edicao)
resumo_idade <- olimpiadas %>%
group_by(Year) %>%
mutate(
media_idade = mean(Age)
)
View(resumo_idade)
resumo_idade <- olimpiadas %>%
group_by(Year) %>%
summarise(
media_idade = mean(Age)
)
View(resumo_idade)
glimpse(olimpiadas)
olimpiadas$Age <- as.integer(olimpiadas$Age)
glimpse(olimpiadas)
teste <- olimpiadas %>%
summarise(
i = mean(Age)
)
teste
atleta_selecao <- olimpiadas %>%
group_by(Team) %>%
summarise(
freq = n(),
media_idade = median(Age)
)
atleta_selecao
atleta_selecao <- olimpiadas %>%
group_by(Year) %>%
summarise(
freq = n(),
media_idade = median(Age)
)
atleta_selecao
View(atleta_selecao)
resumo_sexo <- olimpiadas %>%
group_by(Sex) %>%
summarise(
freq = n(),
media_idade = mean(Age)
)
resumo_sexo
resumo_sexo <- olimpiadas %>%
group_by(Year) %>%
summarise(
freq = n(),
media_idade = mean(Age)
)
resumo_sexo
View(resumo_sexo)
resumo_edicao <- olimpiadas %>%
group_by(Year) %>%
summarise(
freq = n(),
media_idade = mean(Age)
)
View(resumo_esporte)
resumo_esporte <- olimpiadas %>%
group_by(Sport) %>%
summarise(
freq = n()
)
View(resumo_esporte)
resumo_esporte <- olimpiadas %>%
group_by(Sport) %>%
summarise(
freq = n()
) %>% arrange(desc(freq))
View(resumo_esporte)
View(resumo_evento)
View(resumo_sexo)
View(resumo_atletas)
View(resumo_medalhas)
library(ggplot2)
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
dados_dash <- read.csv("dadosIMDB.csv")
olimpiadas$Age <- as.integer(olimpiadas$Age)
olimpiadas %>% group_by(Age) %>% summarise(qtd = n())
library(dplyr)
olimpiadas %>% group_by(Age) %>% summarise(qtd = n())
olimpiadas %>% group_by(Age) %>% summarise(qtd = n(), media =mean(Age))
olimpiadas %>% group_by(Year) %>% summarise(qtd = n(), media =mean(Age))
olimpiadas %>% filter(Year == 1900) %>% summarise(qtd = n(), media =mean(Age))
olimpiadas %>% filter(Year == 1900)
View(olimpiadas %>% filter(Year == 1900))
View(olimpiadas %>% filter(Year == 1900)) %>% summarise(qtd = n(), media =mean(Age, is.na = True))
olimpiadas %>% filter(Year == 1900) %>% summarise(qtd = n(), media =mean(Age, na.rm = TRUE))
olimpiadas %>% filter(Medal != "") %>% group_by_all(list("Team", "Medal"))
olimpiadas %>% filter(Medal != "") %>% group_by_all(Team, Medal)
olimpiadas %>% filter(Medal != "") %>% group_by_all(Team, Medal)
olimpiadas %>% group_by_all(Team, Medal)
olimpiadas %>% filter(Medal != "") %>% group_by(Team, Medal)
olimpiadas %>% filter(Medal != "") %>% group_by(Team, Medal) %>% summarise(freq = n())
View(olimpiadas %>% filter(Medal != "") %>% group_by(Team, Medal) %>% summarise(freq = n()))
library(highcharter)
# Adicionar a divisão por grupo
hchart(
a %>% filter(freq > 80),
type = "column",
hcaes(x=Team, y = freq, group = Medal)
) %>% hc_add_theme(hc_theme_db())
a = olimpiadas %>% filter(Medal != "") %>% group_by(Team, Medal) %>% summarise(freq = n())
# Adicionar a divisão por grupo
hchart(
a %>% filter(freq > 80),
type = "column",
hcaes(x=Team, y = freq, group = Medal)
) %>% hc_add_theme(hc_theme_db())
View(resumo_medalhas)
a
a %>% group_by(Team) %>% summarise(qtd_medalhas = sum(freq))
a %>% group_by(Team) %>% summarise(qtd_medalhas = sum(freq)) %>% slice_max(20, order_by = qtd_medalhas)
a %>% group_by(Team) %>% summarise(qtd_medalhas = sum(freq)) %>% slice_max(n = 20, order_by = qtd_medalhas)
a %>% group_by(Team) %>% summarise(qtd_medalhas = sum(freq)) %>% slice_max(n = 30, order_by = qtd_medalhas)
View(a %>% group_by(Team) %>% summarise(qtd_medalhas = sum(freq)) %>% slice_max(n = 30, order_by = qtd_medalhas))
a %>% group_by(Team) %>% summarise(qtd_medalhas = sum(freq)) %>% slice_max(n = 30, order_by = qtd_medalhas) select(Team)
a %>% group_by(Team) %>% summarise(qtd_medalhas = sum(freq)) %>% slice_max(n = 30, order_by = qtd_medalhas) %>% select(Team)
resultado_medalha_selecao <- olimpiadas %>%
filter(Medal != "") %>%
group_by(Team, Medal) %>%
summarise(
freq = n()
)
selecoes <- resultado_medalha_selecao %>%
group_by(Team) %>%
summarise(
qtd_medalhas = sum(freq)) %>%
slice_max(n = 30, order_by = qtd_medalhas)%>%
select(Team)
View(selecoes)
selecoes <- resultado_medalha_selecao %>%
group_by(Team) %>%
summarise(
qtd_medalhas = sum(freq)) %>%
slice_max(n = 25, order_by = qtd_medalhas)%>%
select(Team)
resultado_medalha_selecao %>% filter(Team %in% selecoes)
resultado_medalha_selecao %>% filter(Team %in% selecoes)
resultado_medalha_selecao %>% filter(Team %in% selecoes)
resultado_medalha_selecao %>% filter(Team %in% selecoes$Team)
---
title: "Themed dashboard"
setwd("D:/Gabriel/Meus_Projetos/GitHub/Gabriel/Analise_Ecologica_Estudos/ecodados")
library(tidyverse)
if(!require(tidyverse)){
install.packages("tidyverse")
}
install.packages("tidyverse")
#Listar todos os pacotes do Tidyverse
tidyverse::tidyverse_packages()
# Verificar se os pacotes estão atualizados, caso contrário atualiza-los
tidyverse::tidyverse_update()
#Pacote here: permite fazzer caminhos para os arquivos de forma simple e de maior reprodutibilidade
## Diretorio é definido a partir do local onde foi armazenado o projeto
if(!require(here)){
install.packages("here")
}
library(here)
# Setar o diretório no qual o projeto esta sendo executado
here::here()
# Importar dados locais
tidy_anfibios_locais <- readr::read_csv(
here::here("data-raw", "ATLANTIC_AMPHIBIANS_sites.csv"), #Caminho do arquivo e nome
locale = readr::locale(encoding = "latin1")
)
View(tidy_anfibios_locais)
tidy_anfibios_locais
# Selecionar determinados colunas do tibble
tidy_anfibios_locais["id"]
# Impressão do tibble
tidy_anfibios_locais
tidy_anfibios_locais[["id", "year"]]
tidy_anfibios_locais[["id", "year"], 1:10]
tidy_anfibios_locais[["id", "year_finish"], 1:10]
tidy_anfibios_locais$id
# Espiar ps dadps, noção geral das informações
tibble::glimpse(tidy_anfibios_locais[,1:10])
# R Base sem pipe
sqrt(sum(1:100))
# Utilizando o operador pipe
1:100 %>%
sum() %>%
# Funçãoo set.seed() fixa a amostragem de funções que geram valores aleatórios
# Fixar amostragem
set.seed(42)
# Utilizando o operador pipe
1:100 %>%
sum() %>%
# Funçãoo set.seed() fixa a amostragem de funções que geram valores aleatórios
# Fixar amostragem
set.seed(42)
# Utilizando o operador pipe
1:100 %>%
sum() %>%
sqrt()
# Utilizando o operador pipe
1:100 %>%
sum() %>%
sqrt()
# Utilizando o operador pipe
1:100 %>%
sum() %>%
sqrt()
# Fixar amostragem
set.seed(42)
# Utilizando o operador pipe
1:100 %>% sum() %>% sqrt()
# Fixar amostragem
set.seed(42)
# R base - sem pipe
ve <- sum(sqrt(sin(log10(rpois(100,10)))))
ve
library(palmerpenguins)
penguins_raw
# Glimpse - observar os dados
dplyr::glimpse(penguins_raw)
# Unir as colunas regio e ilhas
penguins_raw_unir <- tidyr::unite(
data = penguins_raw,
col = "region_island",
Region:Island,    #Intervalo de Colunas
sep = ", ",
remove = FALSE
)
head(penguins_raw_unir[,c("Region", "Island", "region_island")])
head(penguins_raw_unir[,c("Region", "Island", "region_island")])
penguins_raw_separar <- tidyr::separate(
data = penguins_raw,
col = Stage,
into = c("stage", "egg_stages"),
sep = ", ",
remove = FALSE
)
head(penguins_raw_separar[,c("Stage", "stage", "egg_stage")])
head(penguins_raw_separar[,c("Stage", "stage", "egg_stages")])
# Separar colunas em novas linhas
penguins_raw_separa_linhas <- penguins_raw %>%
tidyr::separate_rows(
Stage,
sep = ", "
)
library(tidyverse)
# Separar colunas em novas linhas
penguins_raw_separa_linhas <- penguins_raw %>%
tidyr::separate_rows(
Stage,
sep = ", "
)
head(penguins_raw_separa_linhas[,c("studyName", "Sample Number", "Species", "Region", "Island", "Stage")])
head(penguins_raw_na)
#Remover todas as linhas com NAs
penguins_raw_na <- tidyr::drop_na(data = penguins_raw)
head(penguins_raw_na)
# Remover linhas de colunas específicas com NA
penguins_raw_colunas_na <- tidyr::drop_na(data = penguins_raw,
any_of("Comments"))
head(penguins_raw_colunas_na[,"Comments"])
penguins_raw$Comments
# Remover linhas de colunas específicas com NA
penguins_raw_colunas_na <- tidyr::drop_na(data = penguins_raw,
any_of("Comments"))
# Substituir NA por outro valor
penguins_raw_subs_na <- tidyr::replace_na(data = penguins_raw,
list(Comments = "Unkown"))
head(penguins_raw_subs_na$Comments)
# Função tidyr::pivot_wider()
penguins_raw_sel_col <- penguins_raw[,c(2,3,13)]
head(penguins_raw_sel_col)
# Pivotar para largo
penguins_raw_pivot_wider <- tidyr::pivot_wider(data = penguins_raw_sel_col,
names_from = Species,
values_from = 'Body Mass (g)')
head(penguins_raw_pivot_wider)
View(penguins_raw_pivot_wider)
View(penguins_raw_pivot_wider)
# Processo Inverso - Largo para longo
# Parâmetros
# cols - indica as colunas a ser pivotadas
# names_to: indica a coluna de onde os nomes serão usadas
# values_to: indica a coluna com os valores
penguins_raw_sel_col <- penguins_raw[,c(2,3,10:13)]
head(penguins_raw_sel_col)
# Pivotar para largo
penguins_raw_pivot_longer <- tidyr::pivot_longer(
data = penguins_raw_sel_col,
cols = 'Culmen Length (mm)':"Body Mass (g)",
names_to = "medidas",
values_to = "valores"
)
head(penguins_raw_pivot_longer)
# Reordenar colunas  =nome
penguins_relocate_col <- penguins %>%
dplyr::relocate(sex, year, .after = island)
head(penguins_relocate_col)
# Reoordenar colunas por posição
penguins_relocate_ncol <- penguins %>%
dplyr::relocate(sex, year, .after = 2)
head(penguins_relocate_ncol)
# ---------------------------------
# Rename - renomear colunas
# Primeiro o nome que queremos que a coluna tenha, e a coluna que j´´a existe a ser alterada
penguins_rename <_ penguins %>%
# ---------------------------------
# Rename - renomear colunas
# Primeiro o nome que queremos que a coluna tenha, e a coluna que j´´a existe a ser alterada
penguins_rename <- penguins %>%
dplyr::rename(
bill_length = bill_length_mm,
flipper_length = flipper_length_mm
)
head(penguins_rename)
# Mudar o nome de todas as colunas
penguins_rename_all <- penguins %>%
dplyr::rename_with(toupper())
# Mudar o nome de todas as colunas
penguins_rename_all <- penguins %>%
dplyr::rename_with(toupper())
# Mudar o nome de todas as colunas
penguins_rename_all <- penguins %>%
dplyr::rename_with(toupper)
head(penguins_rename_all)
# Selecionar por posição
penguins_Select_position <- penguins %>%
dplyr::select(3:6)
head(penguins_Select_position)
# Selecionar colunas por nomes
penguins_selct_names <- penguins %>%
dplyr::select(bill_length_mm:body_mass_g)
head(penguins_selct_names)
# Selecionar colunas por padrão
penguins %>%
dplyr::select(contains("_mm"))
# Selecionar coluna por inicio do nome
penguins %>%
dplyr::starts_with("bi")
# Selecionar coluna por inicio do nome
penguins %>%
dplyr::starts_with(vars = "bill")
# Selecionar coluna por inicio do nome
penguins %>%
dplyr::select(starts_with(vars = "bill"))
# Selecionar coluna por inicio do nome
penguins %>%
dplyr::select(starts_with("bill"))
# Selecionar coluna por final do nome
penguins %>%
dplyr::select(ends_with("mm"))
# Pull - caso a coluna que retorne torne um vetor dentro do encadeamento dos pipes
penguins %>%  dplyr::pull(bill_length_mm)
