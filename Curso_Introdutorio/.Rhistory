print("Hello World");
int x = 10;
int x;
x = 10
print(x**2)
x = 20 * x
end()
x = 10;
int x = 10;
if(x == 10){
print("Hello World");
}
if(x != 10){
print("Hello World");
}
print("Ola Mundo")
print("Ola Mundo");
x = integer(1);
if(x != 10){
print("Hello World");
}
if(x != 10){
print("Hello World");
}else if(x == 1){
print("Ola Mundo");
}else{
print("Tchau")
}
if(x != 10){
print("Hello World");
}else if(x == 10){
print("Ola Mundo");
}else{
print("Tchau")
}
if(x >= 10){
print("Hello World");
}else if(x == 10){
print("Ola Mundo");
}else{
print("Tchau")
}
print("Ola")
while TRUE{
print("Ola")
while (x != 1){
print("Ola")
}
for(i = 0; i < 10; i++){
print(nome, "\n")
for (nome in nomes) {
print(nome, "\n")
}
print(nome)
for (nome in nomes) {
print(nome)
}
for (nomes in nome) {
print(nome)
}
print(x)
end()
x = "Nome"
teste <- "Teste"
x -< "Gabriel"
x <- "Gabriel"
d <- "Gabriel"
b <- 8.5
#criação de variáveis. Utiliza-se '<-' para a criação de variáveis e '=' na atribuição de funções
a <- 10
c <- TRUE
print(a)
print(d)
print(e)
print(c)
#Impressão na tela
print(c, " e ", b)
#Impressão na tela
print(c + " e " + b)
#Impressão na tela
print(a + " e " + b)
#Impressão na tela
print(a, b)
#Impressão na tela
print(a, b)
#Impressão na tela
print(a +b)
c <- TRUE         #Variável do tipo Logical
#criação de variáveis. Utiliza-se '<-' para a criação de variáveis e '=' na atribuição de funções
#padrão: 'variavel' <- 'valor'
a <- 10           # Variável do tipo numeric
b <- 8.5          # Variável do tipo numeric
# Aqui será informado o comentário
#Ctrl + enter -. executar o código, de linha selecionada ou como um todo
#Ctrl + L: limpara o console
#Case-sensitive: diferencia letra maiúsculas e minúsculas
#criação de variáveis. Utiliza-se '<-' para a criação de variáveis e '=' na atribuição de funções
#padrão: 'variavel' <- 'valor'
a <- 10           # Variável do tipo numeric
b <- 8.5          # Variável do tipo numeric
c <- TRUE         #Variável do tipo Logical
d <- "Gabriel"    # Variável do tipo character
#Impressão na tela
print(a +b)
# Operadores Aritméticos
# Operadores Relaciconais
# Operadores Lógicos
soma <- a + b
subt <- a - b
mult <- a * b
div <- a / b
rest <- a % b
pot < a ** b
pot <- a ** b
a <- 10           # Variável do tipo numeric
b <- 8.5          # Variável do tipo numeric
c <- TRUE         #Variável do tipo Logical
d <- "Gabriel"    # Variável do tipo character
e <- 2
#Impressão na tela
print(a +b)
# Operadores Aritméticos
soma <- a + e
subt <- a - e
mult <- a * e
div <- a / e
rest <- a % e
f <- "Siqueira"
#Concatenação de strings
nomeCompleto = d + f
nomeCompleto = c(nome, sobrenome) #Função 'c':
nome <- "Gabriel"
sobrenome <- "Siqueira"
nomeCompleto = c(nome, sobrenome) #Função 'c':
# help
?c
# help
?C
# help
?C
# help
?c
#Função responsável por combinar os valores informados por parâmetro a fim de criar um vetor ou lista
nomeCompleto = c(nome, sobrenome, recursive=TRUE) #Função 'c':
#Função responsável por combinar os valores informados por parâmetro a fim de criar um vetor ou lista
nomeCompleto = c(nome, sobrenome, recursive=TRUE) #Função 'c':
# help
?c
nomeCompleto = c(nome, sobrenome, recursive=TRUE) #Função 'c':
nomeCompleto = c(nome, sobrenome, recursive=TRUE) #Função 'c':
#Função responsável por combinar os valores informados por parâmetro a fim de criar um vetor ou lista
nomeCompleto = c(nome, sobrenome, recursive=TRUE) #Função 'c':
valores <- c(10, 20, 30, 40, 50)
valores[0]
a[1]
#Verificar em determinada posição
a[1:3]
summary(a)
summary(valores) #resumo da variável
?str_c
install.packages("stringr")
library(stringr)
library(stringr)
?str_c
nomeCompleto <- str_c(nome, sobrenome)
?str_c
nomeCompleto <- str_c(nome," ",  sobrenome) #Método resposnável por concatenar string
nomeCompleto <- str_c(nome," ",  sobrenome) #Método resposnável por concatenar string
print(nomeCompleto)
print("Meu nome é ", nomeCompleto)
pot <- a ^ b
# Operadores aritméticos
a <- 5
b <- 2
pot <- a ^ b
pot <- a ** 2
pot <- a ^ b
pot <- a ** 2
soma <- a + b
subt <- a - b
mult <- a * b
div <- a / b
pot <- a ** 2
pot <- a ^ b
#Operadores relacionais (==, !=, >, < , >=, <= )
a == b
a != b
a > b #Maior que
a < b
#Operadores Lógicos
a == b
#Operadores Lógicos
a == b && a > b
#Operadores Lógicos
a != b && a > b
#Operadores Lógicos (E - &)
a != b & a > b
a == b | a > b #Operador Ou
!(a == b) && a > b
source("~/.active-rstudio-document")
salario <- 3450.89
hora <- 10
sh <- salario / hora
?as.integer
sh <- as.integer(sh)
shR <- round(sh)
shI <- as.integer(sh)  #Conversão de tipo de dado, neste caso, para inteiro
sh <- salario / hora
shR <- round(sh) #Realiza arrendondamento do valor
shR <- round(sh) #Realiza arrendondamento do valor
shR <- round(sh) #Realiza arrendondamento do valor
#Numérico
salario <- 3450.99
shI <- as.integer(sh)  #Conversão de tipo de dado, neste caso, para inteiro
shR <- round(salario) #Realiza arrendondamento do valor
shR <- round(sh) #Realiza arrendondamento do valor
#Numérico
salario <- 3450.49
salario <- 3450.49
salarioArrendado <- round(salario)
salario <- 3450.50
salarioArrendado <- round(salario)
#Numérico
salario <- 3450.57
salarioArrendado <- round(salario)
salario <- 3450.51
salarioArrendado <- round(salario)
sh <- salario / hora
shI <- as.integer(sh)  #Conversão de tipo de dado, neste caso, para inteiro
shR <- round(sh) #Realiza arrendondamento do valor (menor que 0.51 - arrendoda para baixo, maior que 0,51 - arredonda para cima)
?as.integer
hora <- 220
sh <- salario / hora
shI <- as.integer(sh)  #Conversão de tipo de dado, neste caso, para inteiro
shR <- round(sh)
# Caractere
nome <- "Gabriel"
idade <- 18
sobrenome <- "Siqueira"
nomeCompleto <- c(nome, sobrenome)
nomeCompleto[0]
nomeCompleto[1]
nomeCompleto[2]
nomeCompleto[0]
nome == sobrenome
nome == nome
str_length(nome)
source("~/.active-rstudio-document")
cargaHoraria <- c(220, 150, 100)
summary()
summary(cargaHoraria)
cargaHoraria <- as.factor(cargaHoraria)
summary(cargaHoraria)
# Fatores - categorias de valores
cargaHoraria <- c(220, 150, 100, 100, 220)
cargaHoraria <- as.factor(cargaHoraria)
summary(cargaHoraria)
mode(cargaHoraria)
class(cargaHoraria)
l1 <- salario > horas
l1 <- salario > hora
# Tipos de Dados
#Numérico
salario <- 3450.51
salarioArrendado <- round(salario)
hora <- 220
sh <- salario / hora
shI <- as.integer(sh)  #Conversão de tipo de dado, neste caso, para inteiro
shR <- round(sh) #Realiza arrendondamento do valor (menor que 0.51 - arrendoda para baixo, maior que 0,51 - arredonda para cima)
?as.integer
# ------------------------------------------>> <<------------------------------------------------------------------
# Caractere
nome <- "Gabriel"
sobrenome <- "Siqueira"
idade <- 18
nomeCompleto <- c(nome, sobrenome)
nome == sobrenome #Comparação de strings - totalmente igual
str_length(nome) #Tamanho de uma strings
# ------------------------------------------>> <<------------------------------------------------------------------
# Fatores - categorias de valores; esta função permite fazer o agrupamento de informações iguais, como o group by do Mysql
cargaHoraria <- c(220, 150, 100, 100, 220)
summary(cargaHoraria)
cargaHoraria <- as.factor(cargaHoraria)
summary(cargaHoraria)
mode(cargaHoraria) #Verificar a maneira com que está armazenaada
class(cargaHoraria) #verificar o tipo de dado
# ------------------------------------------>> <<------------------------------------------------------------------
# Lógicos
l1 <- salario > hora
l2 <- salario < hora
is.vector(nome)
is.vector(idade)
is.vector(nome)
is.vector(l1)
# ------------------------------------------>> <<------------------------------------------------------------------
aluno  <- c(nome = "Gabriel", idade = 18)
# ------------------------------------------>> <<------------------------------------------------------------------
#Lista - vetor com tipo de dados diferentes
a <- c(1, 2, "Teste", 2.5)
is.list(a)
# ------------------------------------------>> <<------------------------------------------------------------------
#Lista - vetor com tipo de dados diferentes
a <- c(1, 2, "3", 2.5)
a
is.vector(a)
as.numeric(a)
is.list(a)
# ------------------------------------------>> <<------------------------------------------------------------------
#Lista - vetor com tipo de dados diferentes
a <- c(1, 2, "3", 2.5)
is.list(a)
as.numeric(a)
b <- list(10, "Teste", 1.2)
as.numeric(a)b
b
mode(b)
c <- list(c(1, 2, 3, 4), "Gabriel", 8.5)
View(c)
View(c)
View(c)
View(c)
View(b)
View(c)
c[1][1]
c[2][1]
c[0]
c[1]
c[1][1]
c[[1]][1]
?matrix
# ------------------------------------------>> <<------------------------------------------------------------------
#Matriz - vetor com duas dimensões, apenas um tipo de dados
m <- matrix(1:9, nrow=3) # 1:9 - intervalo de 1 à 9
View(m)
mode(m)
View(m)
m[[1]][1]
m[[1]][3]
m[[1]][2]
3
m[[2]][3]
m[[2]][3]
m[[2]][3]
m[1,3] #linha e coluna
m[1,3] <- 19
View(m)
mode(m)
#Definir área de trabalho - pasta na qual será armazenado as informações do DataFram
setwd("D:\Gabriel\Meus_Projetos\GitHub\Gabriel")
#Definir área de trabalho - pasta na qual será armazenado as informações do DataFram
setwd("\D:\Gabriel\Meus_Projetos\GitHub\Gabriel")
#Definir área de trabalho - pasta na qual será armazenado as informações do DataFram
setwd("D:/Gabriel/Meus_Projeto/\GitHub/Gabriel")
#Definir área de trabalho - pasta na qual será armazenado as informações do DataFram
setwd("D:/Gabriel/Meus_Projeto/GitHub/Gabriel")
#Definir área de trabalho - pasta na qual será armazenado as informações do DataFram
setwd("D:/Gabriel/Meus_Projeto/GitHub/Gabriel")
#Definir área de trabalho - pasta na qual será armazenado as informações do DataFram
setwd("C:/Gabriel/Meus_Projeto/GitHub/Gabriel")
#Definir área de trabalho - pasta na qual será armazenado as informações do DataFram
setwd("C:/Users/gerso/Documents/teste")
#Definir área de trabalho - pasta na qual será armazenado as informações do DataFram
setwd("D:/Gabriel/Meus_Projeto")
#Definir área de trabalho - pasta na qual será armazenado as informações do DataFram
setwd("D:/Gabriel/Meus_Projetos")
#Definir área de trabalho - pasta na qual será armazenado as informações do DataFram
setwd("D:/Gabriel/Meus_Projetos/GitHub/Gabriel/Curso_Introdutorio")
#Importar base de dados
df <- read.csv("DataFrame.csv")
#Importar base de dados
df <- read.csv("DataFrame.csv")
#Importar base de dados
df <- read.csv("DataFrame.csv")
df <- read.csv("DataFrame.csv")
View(df)
view(df)
view(df)
#Analisando o dataFrame
View(df)
#Importar base de dados
df <- read.csv("DataFrame.csv")
#Analisando o dataFrame
View(df) #MOstrar o dado
#Importar base de dados
df <- read.csv("DataFrame.csv")
#Analisando o dataFrame
View(df) #MOstrar o dado
#Importar base de dados
df <- read.csv("DataFrame.csv")
#Analisando o dataFrame
View(df) #MOstrar o dado
#Importar base de dados
df <- read.csv("teste.csv")
#Analisando o dataFrame
View(df) #MOstrar o dado
#Analisando o dataFrame
View(df) #MOstrar o dado
str(df)
str(df)
df[1]
df[DIA_SEM]
#Mostrar dataframe
df[1]
#Mostrar dataframe
df[5]
df$TEMPO
col1 <- factor(df$DIA_SEM)
view(col1)
View(col1)
col1 <- df[5]
col2 <- df$DIA_SEM #Coluna específica com base no nome
View(col1)
#Excluir coluna do DataFrame
df$AUTO <- NULL
#Analisando o dataFrame
View(df) #MOstrar o dado
#Alterar o tipo da variavel
df$UPS
#Alterar o tipo da variavel
summary(df$UPS)
#Alterar o tipo da variavel
df$UPS <- as.factor(df$UPS)
View(df)
df$UPS
summary(df$UPS)
#Criar nova variável no dataFrane
dfNova <- a
View(df)
#Criar nova variável no dataFrane
dfNova <- a
#Criar nova variável no dataFrane
df$Nova <- a
#Criar nova variável no dataFrane
df$Nova <- 'a'
View(df)
#Criar nova variável no dataFrane
df$Nova <- 1:8
#Criar nova variável no dataFrane
df$Nova <- 1:9
View(df)
#Criar nova variável no dataFrane
df$Nova <- c(1,2,3,4,5,6,7,8,NA) #NA - valor não definido
View(df)
df$Nova <- null
df$Nova <- NULL
df$nova <- NA #Inicializa com valor padrão
df$nova[1:3] <- c(2, 5, 10)
install.packages("Rcmdr")
install.packages("ISwR")
plot.new();
library(Rcmdr)
library(Rcmdr)
plot.new();
library(Rcmdr)
library(I)
library(Rcmdr)
